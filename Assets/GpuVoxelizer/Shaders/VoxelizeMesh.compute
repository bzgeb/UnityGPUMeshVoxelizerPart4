#pragma kernel VoxelizeMesh
#include "VoxelCommon.cginc"

struct Triangle
{
    float3 a, b, c;
};

struct AABB
{
    float3 center;
    float3 extents;
};

RWStructuredBuffer<Voxel> _Voxels;
StructuredBuffer<float3> _MeshVertices;
StructuredBuffer<int> _MeshTriangleIndices;

float4x4 _WorldToLocalMatrix;

int _TriangleCount;

float4 _BoundsMin;

float _CellHalfSize;
int _GridWidth;
int _GridHeight;
int _GridDepth;

bool IntersectsTriangleAabbSat(float3 v0, float3 v1, float3 v2, float3 aabbExtents, float3 axis)
{
    float p0 = dot(v0, axis);
    float p1 = dot(v1, axis);
    float p2 = dot(v2, axis);

    float r = aabbExtents.x * abs(dot(float3(1, 0, 0), axis)) +
        aabbExtents.y * abs(dot(float3(0, 1, 0), axis)) +
        aabbExtents.z * abs(dot(float3(0, 0, 1), axis));

    float maxP = max(p0, max(p1, p2));
    float minP = min(p0, min(p1, p2));

    return !(max(-maxP, minP) > r);
}

bool IntersectsTriangleAabb(Triangle tri, AABB aabb)
{
    tri.a -= aabb.center;
    tri.b -= aabb.center;
    tri.c -= aabb.center;

    float3 ab = normalize(tri.b - tri.a);
    float3 bc = normalize(tri.c - tri.b);
    float3 ca = normalize(tri.a - tri.c);

    //Cross ab, bc, and ca with (1, 0, 0)
    float3 a00 = float3(0.0, -ab.z, ab.y);
    float3 a01 = float3(0.0, -bc.z, bc.y);
    float3 a02 = float3(0.0, -ca.z, ca.y);

    //Cross ab, bc, and ca with (0, 1, 0)
    float3 a10 = float3(ab.z, 0.0, -ab.x);
    float3 a11 = float3(bc.z, 0.0, -bc.x);
    float3 a12 = float3(ca.z, 0.0, -ca.x);

    //Cross ab, bc, and ca with (0, 0, 1)
    float3 a20 = float3(-ab.y, ab.x, 0.0);
    float3 a21 = float3(-bc.y, bc.x, 0.0);
    float3 a22 = float3(-ca.y, ca.x, 0.0);

    if (
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a00) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a01) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a02) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a10) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a11) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a12) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a20) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a21) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, a22) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(1, 0, 0)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 1, 0)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, float3(0, 0, 1)) ||
        !IntersectsTriangleAabbSat(tri.a, tri.b, tri.c, aabb.extents, cross(ab, bc))
    )
    {
        return false;
    }

    return true;
}

[numthreads(4,4,4)]
void VoxelizeMesh(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _GridWidth || id.y >= _GridHeight || id.z >= _GridDepth) return;

    const float cellSize = _CellHalfSize * 2.0;

    const float4 centerPos = float4(id.x * cellSize + _CellHalfSize + _BoundsMin.x,
                                    id.y * cellSize + _CellHalfSize + _BoundsMin.y,
                                    id.z * cellSize + _CellHalfSize + _BoundsMin.z, 1.0);

    AABB aabb;
    aabb.center = mul(_WorldToLocalMatrix, centerPos);
    aabb.extents = float3(_CellHalfSize, _CellHalfSize, _CellHalfSize);

    bool intersects = false;
    for (int i = 0; i < _TriangleCount; i += 3)
    {
        Triangle tri;
        tri.a = _MeshVertices[_MeshTriangleIndices[i]];
        tri.b = _MeshVertices[_MeshTriangleIndices[i + 1]];
        tri.c = _MeshVertices[_MeshTriangleIndices[i + 2]];
        intersects = IntersectsTriangleAabb(tri, aabb);

        if (intersects)
            break;
    }

    const int voxelIndex = id.x + _GridWidth * (id.y + _GridHeight * id.z);

    const float3 position = float3(_BoundsMin.x + id.x * cellSize,
                                   _BoundsMin.y + id.y * cellSize,
                                   _BoundsMin.z + id.z * cellSize);

    _Voxels[voxelIndex].position = position;
    _Voxels[voxelIndex].isSolid = intersects ? 1.0 : 0.0;
}

/*
[numthreads(8, 8, 1)]
void Volume (uint3 id : SV_DispatchThreadID)
{
    int x = (int)id.x;
    int y = (int)id.y;
    if(x >= _Width) return;
    if(y >= _Height) return;

    for (int z = 0; z < _Depth; z++)
    {
        Voxel voxel = _VoxelBuffer[get_voxel_index(x, y, z)];
        if (!voxel.fill) continue;

        int ifront = z;
        float2 uv = voxel.uv;
        for (; ifront < _Depth; ifront++) {
            int vid = get_voxel_index(x, y, ifront);
            if (!is_front_voxel(_VoxelBuffer[vid])) {
                break;
            }
            uv = _VoxelBuffer[vid].uv;
        }

        if(ifront >= _Depth) return;

        int iback = ifront;

        // step forward to empty
        for (; iback < _Depth &&  is_empty_voxel(_VoxelBuffer[get_voxel_index(x, y, iback)]); iback++) {}

        if (iback >= _Depth) return;

        // check if iback is back voxel
        if (is_back_voxel(_VoxelBuffer[get_voxel_index(x, y, iback)])) {
            // step forward to back face
            for (; iback < _Depth && is_back_voxel(_VoxelBuffer[get_voxel_index(x, y, iback)]); iback++) {}
        }

        // fill from ifront to iback
        for(int z2 = ifront; z2 < iback; z2++)
        {
            Voxel v;
            v.position = get_voxel_position(x, y, z2);
            v.uv = uv;
            v.fill = true;
            v.front = false;
            _VoxelBuffer[get_voxel_index(x, y, z2)] = v;
        }

        z = iback;
    }

}
*/
